import { Directive, Injectable, ElementRef, Input, ChangeDetectorRef } from '@angular/core';
import { ScrollSpyService } from '../index';
var ScrollSpyAffixDirective = (function () {
    function ScrollSpyAffixDirective(ref, elRef, scrollSpy) {
        this.ref = ref;
        this.elRef = elRef;
        this.scrollSpy = scrollSpy;
        this.affix = false;
        this.affixTop = false;
        this.affixBottom = false;
        this.defaultOptions = {
            topMargin: 0,
            bottomMargin: 0
        };
        this.el = elRef.nativeElement;
    }
    ScrollSpyAffixDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.options) {
            this.options = {};
        }
        this.options = Object.assign(this.defaultOptions, this.options);
        this.parentEl = this.el.parentElement;
        this.elementTop = this.parentEl.scrollTop;
        this.elementBottom = this.elementTop + this.parentEl.getBoundingClientRect().height;
        if (!!this.scrollSpy.getObservable('window')) {
            // TODO: Remove setTimeout once: https://github.com/angular/angular/issues/7443
            this.scrollStream$ = this.scrollSpy.getObservable('window').subscribe(function (e) {
                if (typeof e.target.scrollingElement !== 'undefined') {
                    setTimeout(function () { return _this.update(e.target.scrollingElement.scrollTop); });
                }
                else if (typeof e.target.scrollY !== 'undefined') {
                    setTimeout(function () { return _this.update(e.target.scrollY); });
                }
                else if (typeof e.target.pageYOffset !== 'undefined') {
                    setTimeout(function () { return _this.update(e.target.pageYOffset); });
                }
                else if (e.target.parentWindow && e.target.parentWindow.pageYOffset) {
                    setTimeout(function () { return _this.update(e.target.parentWindow.pageYOffset); });
                }
            });
        }
    };
    ScrollSpyAffixDirective.prototype.update = function (currentTop) {
        if (currentTop >= this.elementTop + this.options.topMargin) {
            if (currentTop > this.elementBottom - this.options.bottomMargin - this.el.getBoundingClientRect().height) {
                if (this.affixTop || !this.affixBottom) {
                    this.ref.markForCheck();
                }
                this.affixTop = false;
                this.affixBottom = true;
                this.affix = true;
            }
            else {
                if (!this.affixTop || this.affixBottom) {
                    this.ref.markForCheck();
                }
                this.affixTop = true;
                this.affixBottom = false;
                this.affix = true;
            }
        }
        else {
            if (this.affixTop) {
                this.ref.markForCheck();
            }
            this.affixTop = false;
            this.affixBottom = false;
            this.affix = false;
        }
    };
    ScrollSpyAffixDirective.prototype.ngOnDestroy = function () {
        this.scrollStream$.unsubscribe();
    };
    return ScrollSpyAffixDirective;
}());
export { ScrollSpyAffixDirective };
ScrollSpyAffixDirective.decorators = [
    { type: Injectable },
    { type: Directive, args: [{
                selector: '[scrollSpyAffix]',
                host: {
                    '[class.affix]': 'affix',
                    '[class.affix-top]': 'affixTop',
                    '[class.affix-bottom]': 'affixBottom'
                }
            },] },
];
/** @nocollapse */
ScrollSpyAffixDirective.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: ScrollSpyService, },
]; };
ScrollSpyAffixDirective.propDecorators = {
    'options': [{ type: Input, args: ['scrollSpyAffix',] },],
};
